services:
#########################################
#   Setup server container
#########################################
  api:
    container_name: ${PROJECT_NAME}-app-${ENV_NAME}
    image: ${PROJECT_NAME}-node-mysql-app
    build:
      context: ./back
      dockerfile: DockerFile
      args:
        NODE_ENV: ${NODE_ENV}
    ports:
      - "${API_PORT}:3000"
    environment:
      - SERVICE_NAME=app
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - START_METHOD=${START_METHOD}
    networks:
      - internal
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./back:/usr/src/app
      -  api_node_modules:/usr/src/app/node_modules

#########################################
#   Setup MYSQL container
#########################################
  db:
    container_name: ${DB_HOST}
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - '${DB_PORT}:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - db-config:/etc/mysql
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  mysql_data:
  db-config:
  api_node_modules: